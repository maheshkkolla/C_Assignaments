#!/usr/bin/env node
var exec = require('child_process').exec;
var _ = require('lodash');
var fs = require('fs');
var path = require('path');
var readTemplate = function(name){
	return fs.readFileSync(path.join(__dirname, '..', 'templates', name), 'utf-8');
};
var testRunnerSrc = readTemplate('TestRunner.c');
var allSourceFiles;
var testDetails ;

var isSymbolLine = function(line){return line.match(/^\[/);};
var toSymbol = function(line){return _.last(line.split(' _'));};
var is_a_test_method = function(symbol){return symbol.match(/^test_/);};

var readMethods = function(objdumpSyms){
	var all = objdumpSyms.split('\n').filter(isSymbolLine).map(toSymbol);
	return {
		tests: all.filter(is_a_test_method),
		hasSetup:_.contains(all,'setup'),
		hasTearDown:_.contains(all,'teardown')
	};
};

var createTestDetail = function(name){
	var cmdArgs = {
		testSrc: name,
		testObjFile: name.replace(/Test.c$/,'Test.o'),
		runnerSrc: name.replace(/Test.c$/,'TestRunner.c'),
		runnerExe: name.replace(/Test.c$/,'TestRunner.exe'),
		srcs: allSourceFiles.join(' ')
	};
	var testDetail = {
		name:name,
		runner:cmdArgs.runnerSrc,
		cmd: {
			clean_old_files: _.template('rm -f ${testObjFile} ${runnerSrc} ${runnerExe}',cmdArgs),
			read_test_methods: _.template('gcc -c ${testSrc} && objdump --syms ${testObjFile}',cmdArgs),
			runner_compile: _.template('gcc -o ${runnerExe} ${runnerSrc} ${testSrc} ${srcs}',cmdArgs),
			run: _.template('${runnerExe}',cmdArgs)
		},
		step: -1,
		error:{}
	};
	return testDetail;
};
var step0_clean_old_files = function(testDetail){
	var onClean = function(error,stdout,stderr){
		if(error) testDetail.error.clean_old_files = stderr;
		testDetail.step = 0;
		if(_.every(testDetails,{step:0})) step0_complete();
	};
	exec(testDetail.cmd.clean_old_files,onClean);
};

var step0_complete = function(){
	var checkError = function(td){
		var error = td.error.clean_old_files;
		if(error) console.log(error);
		return error;
	};
	if(_.some(testDetails,checkError)) return;
	testDetails.forEach(step1_read_test_methods);
};
var step1_read_test_methods = function(testDetail){
	var onCompile = function(error,stdout,stderr){
		if(error) testDetail.error.read_test_methods = stderr;
		var methods = readMethods(stdout);
		testDetail.methods = methods;
		testDetail.step = 1;
		if(_.every(testDetails,{step:1})) step1_complete();
	};
	exec(testDetail.cmd.read_test_methods,onCompile);
};
var step1_complete = function(){
	var checkError = function(td){
		var error = td.error.read_test_methods;
		if(error) console.log(error);
		return error;
	};
	if(_.some(testDetails,checkError)) return;
	var hasNoMethod = function(td){
		if(td.methods) return false;
		console.log('no tests in ',td.name);
		return true;
	};
	if(_.some(testDetails,hasNoMethod)) return;
	testDetails.forEach(step2_generateTestRunner);
};
var step2_generateTestRunner = function(testDetail){
	if(!testDetail.methods.tests.length) return;
	//change to lodash template arg
	var src = testRunnerSrc.replace(/\/\*TEST_FUNCTIONS\*\//,','+testDetail.methods.tests.join(','));
	src = src.replace(/\/\*TEST_NAME_FUNCTION_PAIRS\*\//,testDetail.methods.tests.map(to_name_fn_pair).join(','));
	src = src.replace(/\/\*TEST_FILE_NAME\*\//,testDetail.name);
	if(testDetail.methods.hasSetup){
		src = src.replace(/\/\*CALL_SETUP\*\//,'setup();');
	}
	if(testDetail.methods.hasTearDown){
		src = src.replace(/\/\*CALL_TEARDOWN\*\//,'teardown();');
	}
	fs.writeFile(testDetail.runner,src,function(err){
		testDetail.step = 2;
		if(_.every(testDetails,{step:2})) step2_complete();
	});
};
var step2_complete = function(){
	testDetails.forEach(step3_compileTestRunner);
};
var step3_compileTestRunner = function(testDetail, index){
	var onCompile = function(error,stdout,stderr){
		if(error) testDetail.error.runner_compile = stderr;
		testDetail.step = 3;
		if(_.every(testDetails,{step:3})) step3_complete();
	};
	exec(testDetail.cmd.runner_compile,onCompile);
};
var step3_complete = function(){
	var checkError = function(td){
		var error = td.error.runner_compile;
		if(error) console.log(error);
		return error;
	};
	if(_.some(testDetails,checkError)) return;
	testDetails.forEach(step4_run);
};
var step4_run = function(testDetail,index){
	var onRun = function(error,stdout,stderr){
		if(error) testDetail.error.run = stderr;
		testDetail.result = stdout;
		testDetail.step = 4;
		if(_.every(testDetails,{step:4})) step4_complete();
	};
	exec(testDetail.cmd.run,onRun);
};
var step4_complete = function(){
	testDetails.forEach(function(td){
		console.log(td.result);
		if(td.error.run) {
			console.log(td.error.run);
			var lastLine = _.last(td.error.run.split('\n'),2)[0];
			if(lastLine.match(/^assertion /))
				console.log('use "expr_assert.h" instead of <assert.h> to avoid aborting tests on assertion failure\n');
		}
		//total all test, succcess and failure and print
		//exit 1 on all failures
		//add setup, teardown support
	});
};
var to_name_fn_pair = function(name){
	return _.template('"${name}",${name}',{name:name});
};
var is_a_test_file = function(name){ return name.match(/Test.c$/);};
var is_a_src_or_obj_file = function(name){
	return !name.match(/TestRunner.c$/) && !name.match(/Test.c$/) && name.match(/.[co]$/);
};
var main = function(){
	allSourceFiles = args.filter(is_a_src_or_obj_file);
	testDetails = args.filter(is_a_test_file).map(createTestDetail);
	if(testDetails.length)
		testDetails.forEach(step0_clean_old_files);
	else
		console.log('no test files');
};
var showHelp = function(){
	console.log('usage');
	console.log('ctest --help');
	console.log('ctest --sample');
	console.log('ctest justTest.c');
	console.log('ctest mathTest.c math.c');
	console.log('ctest *.c');
	console.log('ctest mathTest.c math.o');
};
var copyTemplate = function(name){
	fs.writeFile(name,readTemplate(name));
};
var generateSample = function(){
	copyTemplate('expr_assert.h');
	copyTemplate('sampleTest.c');
	console.log('----- generated expr_assert.h and sampleTest.c');
	console.log('now run ctest sampleTest.c');
};
//main code
var args = process.argv.splice(2);
if(args[0] === '--help') showHelp();
else if(args[0] === '--sample') generateSample();
else main();